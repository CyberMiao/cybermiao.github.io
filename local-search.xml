<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>系统总线</title>
    <link href="/2023/03/26/%E7%B3%BB%E7%BB%9F%E6%80%BB%E7%BA%BF/"/>
    <url>/2023/03/26/%E7%B3%BB%E7%BB%9F%E6%80%BB%E7%BA%BF/</url>
    
    <content type="html"><![CDATA[<h1 id="第三章-系统总线"><a href="#第三章-系统总线" class="headerlink" title="第三章 系统总线"></a>第三章 系统总线</h1><h2 id="3-1-总线的基本概念"><a href="#3-1-总线的基本概念" class="headerlink" title="3.1 总线的基本概念"></a>3.1 总线的基本概念</h2><p>总线是连接多个部件的<strong>信息传输</strong>线，是各部件<strong>共享的</strong>传输介质。</p><p>在某一时刻，<strong>只允许有一个部件向总线发送信息，而多个部件可以同时从总线上接收相同的信息</strong>。</p><p><img src="/" alt="以CPU为中心的双总线结构"></p><p>其中一组总线<strong>连接CPU和主存</strong>，称为<strong>存储总线（M总线）</strong>；另一组用来<strong>建立CPU和各I&#x2F;O设备之间交换信息的通道</strong>，称为<strong>输入和输出总线（I&#x2F;O总线）</strong>。</p><p>优点：各种I&#x2F;O设备通过I&#x2F;O接口挂到I&#x2F;O总线上，更<strong>便于增删设备</strong>。</p><p>缺点：这种结构在I&#x2F;O设备与主存交换信息时<strong>仍然要占用CPU</strong>，因此还会<strong>影响CPU的工作效率</strong>。</p><hr><p><img src="/" alt="单总线结构"></p><p>优点：当I&#x2F;O设备与主存交换信息时，原则上<strong>不影响CPU的工作</strong>，CPU仍可继续处理不访问主存或I&#x2F;O设备的操作，这就<strong>使CPU的工作效率有所提高</strong>。</p><p>缺点：当某一时刻各部件都要占用总线时，就会<strong>发生冲突</strong>。为此，必须<strong>设置总线判优逻辑</strong>，让各部件<strong>按优先级高低</strong>来占用总线，这也会<strong>影响整机的工作速度</strong>。</p><hr><p><img src="/" alt="以存储器为中心的双总线结构"></p><p>在单总线基础上又开辟出的一条<strong>CPU与主存之间的总线</strong>，称为<strong>存储总线</strong>。这条总线速度高，<strong>只供主存与CPU之间传输信息</strong>。</p><p>优点：既<strong>提高了传输效率</strong>，又<strong>减轻了系统总线的负担</strong>，还<strong>保留了I&#x2F;O设备与存储器交换信息时不经过CPU的特点</strong>。</p><h2 id="3-2-总线的分类"><a href="#3-2-总线的分类" class="headerlink" title="3.2 总线的分类"></a>3.2 总线的分类</h2><p>总线按<em>数据传送方式</em>可分为<strong>并行传输总线</strong>和<strong>串行传输总线</strong>。按总线的<em>使用范围</em>划分，则又有<strong>计算机（包括外设）总线</strong>、<strong>测控总线</strong>、<strong>网络通信总线</strong>等。</p><p>按<em>链接部件</em>不同，分为：</p><h3 id="3-2-1-片内总线"><a href="#3-2-1-片内总线" class="headerlink" title="3.2.1 片内总线"></a>3.2.1 片内总线</h3><p>指<strong>芯片内部</strong>的总线，如在CPU芯片内部，寄存器与寄存器之间、寄存器与算数逻辑单元ALU之间。</p><h3 id="3-2-2-系统总线"><a href="#3-2-2-系统总线" class="headerlink" title="3.2.2 系统总线"></a>3.2.2 系统总线</h3><p>指CPU、主存、I&#x2F;O设备（通过I&#x2F;O接口）<strong>各大部件之间</strong>的信息传输线。</p><p>按照总线<em>传输信息</em>的不同，又可以分为：</p><hr><p><strong>数据总线</strong></p><p>用来传输各功能部件之间的数据信息，是<strong>双向传输总线</strong>，其位数与<strong>机器字长、存储字长</strong>有关。</p><p>数据总线的位数称为<strong>数据总线宽度</strong>。是衡量系统性能的一个重要参数。</p><hr><p><strong>地址总线</strong></p><p>主要用来指出数据总线上的源数据或目的数据在主存单元的<strong>地址</strong>或I&#x2F;O设备的<strong>地址</strong>。是<strong>单向传输总线</strong>，其位数与<strong>存储单元的个数</strong>有关。</p><hr><p><strong>控制总线</strong></p><p>控制总线是用来发出各种<strong>控制信号</strong>的传输线。<em>通常对任一控制线而言，他的控制是单向的，但对于控制总线来说，又可认为是双向的</em>。</p><hr><h3 id="3-2-3-通信总线"><a href="#3-2-3-通信总线" class="headerlink" title="3.2.3 通信总线"></a>3.2.3 通信总线</h3><p>这类总线用于<strong>计算机系统之间</strong>或<strong>计算机系统与其他系统</strong>之间的通信。</p><p>按照传<em>输方式</em>可分为两种：<strong>串行通信</strong>和<strong>并行通信</strong>。</p><p>串行通信是指数据在<strong>单条1位宽</strong>的传输线上，一位一位地<strong>按顺序分时</strong>传送。</p><p>并行通信是指数据在<strong>多条并行1位宽</strong>的传输线上，<strong>同时</strong>由源传送到目的地。</p><blockquote><p>并行通信适宜于<strong>近距离</strong>的数据传输，通常小于30m；串行通信适宜于<strong>远距离传送</strong>，可以从几米到数千千米。而且，串行和并行通信的<strong>传输速率都与距离成反比</strong>。</p></blockquote><h2 id="3-3-总线特性及性能指标"><a href="#3-3-总线特性及性能指标" class="headerlink" title="3.3 总线特性及性能指标"></a>3.3 总线特性及性能指标</h2><h3 id="3-3-1-总线特性"><a href="#3-3-1-总线特性" class="headerlink" title="3.3.1 总线特性"></a>3.3.1 总线特性</h3><p>(1). 机械特性</p><p>机械特性是指总线在机械连接方式上的一些性能。</p><p>(2). 电气特性</p><p>电器特性是指总线的每一根传输线上信号的传递方向和有效的电平范围。</p><p>(3). 功能特性</p><p>功能特性是指总线中每根传输线的功能。</p><p>(4). 时间特性</p><p>时间特性是指总线中的任一根线在什么时间内有效。</p><h3 id="3-3-2-总线性能指标"><a href="#3-3-2-总线性能指标" class="headerlink" title="3.3.2 总线性能指标"></a>3.3.2 总线性能指标</h3><ol><li>总线宽度：通常是指数据总线的根数，用bit(位)表示。</li><li>总线带宽：总线带宽可理解位总线的数据传输速率，即单位时间内总线上传输数据的位数，通常用每秒传输信息的字节数来衡量，单位可用MBps（兆字节每秒）表示。</li><li>时钟同步&#x2F;异步：总线上的数据与时钟同步工作的总线称为同步总线，与时钟不同步的总线称为异步总线。</li><li>总线复用：一根信号线上分时传送两种信号。</li><li>信号线数：地址总线、数据总线和控制总线三种总线数的总和。</li><li>总线控制方式：包括突发工作、自动配置、仲裁方式、逻辑方式、技术方式等。</li></ol><h3 id="3-3-3-总线标准"><a href="#3-3-3-总线标准" class="headerlink" title="3.3.3 总线标准"></a>3.3.3 总线标准</h3><p>为了使系统设计简化，模块生产批量化，确保其性能稳定、质量可靠，实现可移化，便于维护等，人们开始研究如何使总线建立标准，在总线的统一标准下，完成系统设计、模块制作。</p><p>所谓总线标准，可视为系统与各模块、模块与模块之间的一个互联的标准界面。</p><p>目前流行的总线标准：</p><ol><li>ISA总线</li><li>EISA总线</li><li>VESA（VL-BUS）总线</li><li>PCI总线</li><li>AGP总线</li><li>RS-232C总线</li><li>USB总线</li></ol><h2 id="3-4-总线结构"><a href="#3-4-总线结构" class="headerlink" title="3.4 总线结构"></a>3.4 总线结构</h2><h3 id="3-4-1-单总线结构"><a href="#3-4-1-单总线结构" class="headerlink" title="3.4.1 单总线结构"></a>3.4.1 单总线结构</h3><p><img src="/%E5%8D%95%E6%80%BB%E7%BA%BF%E7%BB%93%E6%9E%84" alt="单总线结构"></p><p>这种结构简单，也便于扩充，但所有的传送都通过这组共享总线，因此极易形成计算机系统的瓶颈。他也不允许两个以上的部件在同一时刻向总线传输信息，这就必然会影响系统工作效率的提高。</p><p>这类总线多数被小型计算机或微型计算机所采用。</p><h3 id="3-4-2-多总线结构"><a href="#3-4-2-多总线结构" class="headerlink" title="3.4.2 多总线结构"></a>3.4.2 多总线结构</h3><hr><p><img src="/%E5%8F%8C%E6%80%BB%E7%BA%BF%E7%BB%93%E6%9E%84" alt="双总线结构"></p><p>双总线结构的特点是将速度较低的I&#x2F;O设备从单总线上分离出来，形成主存总线和I&#x2F;O总线分开的结构。图中通道是一个具有特殊功能的处理器，CPU将一部分功能下放给通道，使其对I&#x2F;O设备具有统一管理的功能，已完成外部设备与主存器之间的数据传送，七系统的吞吐能力可以相当大。</p><p>这类结构大多用于大、中型计算机系统。</p><hr><p>如果将速率不同的I&#x2F;O设备进行分类，然后将它们连接在不同的通道上，那么计算机系统的工作效率将会更高，由此发展成多总线结构。</p><p><img src="/%E4%B8%89%E6%80%BB%E7%BA%BF%E7%BB%93%E6%9E%84" alt="三总线结构"></p><p>图中主存总线用于CPU与主存之间的传输；I&#x2F;O总线供CPU与各类I&#x2F;O设备之间传递信息；DMA总线用于高速I&#x2F;O设备（磁盘、磁带等）与主存之间直接交换信息。</p><p>在三总线结构中，任一时刻只能使用一种总线。</p><hr><p><img src="/%E4%B8%89%E6%80%BB%E7%BA%BF%E7%BB%93%E6%9E%84%E7%9A%84%E5%8F%88%E4%B8%80%E5%BD%A2%E5%BC%8F" alt="三总线结构的又一形式"></p><p>处理器与Cache之间有一条局部总线，它将CPU与Cache或与更多的局部设备连接。</p><p>Cache的控制机构不仅将Cache连到局部总线上，而且还直接连到系统总线上，这样Cache就可通过系统总线与主存传输信息，而且I&#x2F;O设备与主存之间的传输也不必通过CPU。</p><p>还有一条扩展总线，它将局域网、小型计算机接口（SCSI）调制调解器（Modem）以及串行接口都连接起来，而且通过这些接口又可与各类I&#x2F;O设备相连，因此它可支持相当多的设备。</p><p>与此同时，扩展总线又通过跨站总线接口与系统总线相连，由此便可实现这两种总线之间的信息传递，可见其系统的工作效率明显提高。</p><hr><p><img src="/%E5%9B%9B%E6%80%BB%E7%BA%BF%E7%BB%93%E6%9E%84" alt="四总线结构"></p><p>在这里又增加了一条与计算机系统紧密相连的高速总线。在高速总线上挂接了一些高速I&#x2F;O设备。它们通过Cache控制机构中的高速总线桥或高速缓冲器与系统总线各局部总线相连，使的这些高速设备与CPU更密切。</p><p>而一些较低速的设备仍然挂在扩展总线上，并由扩展总线接口与高速总线相连。</p><hr><h2 id="3-5-总线控制"><a href="#3-5-总线控制" class="headerlink" title="3.5 总线控制"></a>3.5 总线控制</h2><p>总线控制主要包括判优控制（或称仲裁逻辑）和通信控制。</p><h3 id="3-5-1-总线判优规则"><a href="#3-5-1-总线判优规则" class="headerlink" title="3.5.1 总线判优规则"></a>3.5.1 总线判优规则</h3><p>总线上所连接的设备，按其对总线有无控制功能可分为主设备（模块）和从设备（模块）两种。</p><p>主设备对总线有控制权，从设备只能响应从主设备发来的总线命令，对总线没有控制权。</p><p>只有获得总线使用权的主设备才能开始传送数据。</p><p>总线的判优控制可分为集中式和分布式，前者将控制逻辑集中在一处（如在CPU中），后者将控制逻辑分散在与总线连接的各个部件或设备上。</p><p>常见的集中控制优先权仲裁方式有以下三种：</p><hr><p>（1） 链式查询</p><p><img src="/%E9%93%BE%E5%BC%8F%E6%9F%A5%E8%AF%A2%E6%96%B9%E5%BC%8F" alt="链式查询方式"></p><p>控制总线中有三根线用于总线控制（BS总线忙、BR总线请求、BG总线同意），其中总线同意信号BG是串行地从一个I&#x2F;O接口送到下一个I&#x2F;O接口。如果BG到达的接口有总线请求，BG信号就不再往下传，意味着该接口获得了总线使用权，并建立总线忙BS信号，表示它占用了总线。</p><blockquote><p>可见在链式查询中，离总线控制部件最近的设备具有最高的优先级。</p></blockquote><p>这种方式的特点是：</p><p>只需很少几根线就能按一定优先次序实现总线控制，并且很容易扩充设备，但对电路故障很敏感，且优先级别低的设备可能很难获得请求。</p><hr><p>（2） 计数器定时查询</p><p><img src="/%E8%AE%A1%E6%95%B0%E5%99%A8%E5%AE%9A%E6%97%B6%E6%9F%A5%E8%AF%A2%E6%96%B9%E5%BC%8F" alt="计数器定时查询方式"></p><p>与链式查询方式相比，多了一组设备地址线，少了一根总线同意先BG。总线控制部件接到由BR送来的总线请求信号后，在总线未被使用（BS&#x3D;0）的情况下，总线控制部件中的计数器开始计数，并通过设备地址线，向各设备发出一组地址信号，当某个请求占用总线的设备地址与计数值一致时，便获得总线使用权，此时终止计数查询。</p><p>这种查询方式的特点是：</p><p>计数可以从“0”开始，此时一旦设备的优先次序被固定，设备的优先级就按0，1，···，n的顺序降序排列，而且固定不变；</p><p>计数也可以从上一次计数的终止点开始，即是一种循环方法，此时设备使用总线的优先级相等；</p><p>计数的初始值还可由程序设置，故优先次序可以改变。</p><p>这种方式对电路故障不如链式查询方式敏感，但增加了控制线（设备地址）数，控制也较为复杂。</p><hr><p>（3） 独立请求方式</p><p><img src="/%E7%8B%AC%E7%AB%8B%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F" alt="独立请求方式"></p><p>每一台设备均有一对总线请求线BRi和总线同意线BGi。当设备要求使用总线时，便发出该设备的请求信号。总线控制部件中有一排队电路，可根据有先次序确定响应哪一台设备的请求。</p><p>这种方式的特点是：</p><p>响应速度快，优先次序控制灵活（通过程序改变），但控制线数量多，总线控制更复杂。</p><hr><p>链式查询中仅用两根线确定总线使用权属于哪个设备，在计数器查询中大致用log2n根线，其中n是允许接纳的最大设备数，而独立请求方式需采用2n根线。</p><h3 id="3-5-2-总线通信控制"><a href="#3-5-2-总线通信控制" class="headerlink" title="3.5.2 总线通信控制"></a>3.5.2 总线通信控制</h3><p>在通信时间上，则应按照分时方式来处理，即以获得总线使用权的先后顺序分时占用总线，即哪一个部件获得使用权，此刻就由它传送，下一部件获得使用权，接着下一时刻传递。</p><p>通常将完成一次总线操作的时间称为总线周期，可分为以下四个阶段：</p><ol><li>申请分配阶段</li><li>寻址阶段</li><li>传数阶段</li><li>结束阶段</li></ol><p>总线控制主要解决通信双发如何获知传输开始和传输结束，以及通信双方如何协调如何配合。通常使用四种方式：同步通信、异步通信、半同步通信和分离式通信。</p><h4 id="同步通信"><a href="#同步通信" class="headerlink" title="同步通信"></a>同步通信</h4><p>通信双方由统一时标控制数据传送称为同步通信。</p><p><img src="/%E5%90%8C%E6%AD%A5%E5%BC%8F%E6%95%B0%E6%8D%AE%E8%BE%93%E5%85%A5%E4%BC%A0%E8%BE%93" alt="同步式数据输入传输"></p><p>T1 主模块发地址。</p><p>T2 主模块发读命令。</p><p>T3 从模块提供数据。</p><p>T4 主模块撤销读命令，从模块撤销数据。</p><hr><p><img src="/%E5%90%8C%E6%AD%A5%E5%BC%8F%E6%95%B0%E6%8D%AE%E8%BE%93%E5%87%BA%E4%BC%A0%E8%BE%93" alt="同步式数据输出传输"></p><p>T1 主模块发地址。</p><p>T1.5 主模块提供数据。</p><p>T2 主模块发出写命令，从模块接收到命令后，必须在规定时间内将数据总线上的数据写到地址总线所指明的单元中。</p><p>T4 主模块撤销写命令和数据等信号。</p><hr><p>这种通信的优点是明确、统一，模块间的配合简单一致。缺点是主从模块时间配合属于强制性“同步”，必须在限定时间内完成规定的要求。</p><p>对所有从模块都用同一限时，这就势必造成，对各不相同速度的部件而言，必须按最慢速度的部件来设计公共时钟，严重影响总线的工作效率，也给设计带来了局限性，缺乏灵活性。</p><h4 id="异步通信"><a href="#异步通信" class="headerlink" title="异步通信"></a>异步通信</h4><p>异步通信克服了同步通信的缺点，允许各模块速度的不一致性，给设计者充分的灵活性和选择余地。</p><p>采用应答方式，即当主模块发出请求信号时，一直等待从模块反馈回来“响应”信号后才开始通信。</p><p>异步通信的应答方式又可分为不互锁、半互锁和全互锁三种类型。</p><h3 id="to-be-continue…"><a href="#to-be-continue…" class="headerlink" title="to be continue…"></a>to be continue…</h3>]]></content>
    
    
    <categories>
      
      <category>计算机组成原理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>计算机系统概论</title>
    <link href="/2023/03/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/"/>
    <url>/2023/03/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="第一章-计算机系统概论"><a href="#第一章-计算机系统概论" class="headerlink" title="第一章 计算机系统概论"></a>第一章 计算机系统概论</h1><h2 id="1-1-计算机系统简介"><a href="#1-1-计算机系统简介" class="headerlink" title="1.1 计算机系统简介"></a>1.1 计算机系统简介</h2><h3 id="1-1-1-计算机系统软硬件概念"><a href="#1-1-1-计算机系统软硬件概念" class="headerlink" title="1.1.1 计算机系统软硬件概念"></a>1.1.1 计算机系统软硬件概念</h3><p>硬件：计算机的实体部分。</p><p>软件：由人们事先编辑的具有各类特殊功能的程序组成。</p><blockquote><p>概括而言，计算机性能的好坏取决于 <strong>“软” “硬”</strong> 件功能的总和。</p></blockquote><h3 id="1-1-2-计算机系统的层次结构"><a href="#1-1-2-计算机系统的层次结构" class="headerlink" title="1.1.2 计算机系统的层次结构"></a>1.1.2 计算机系统的层次结构</h3><p><img src="/imgs/chapter1/%E5%A4%9A%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84.png" alt="多级层次结构的计算机结构" title="多级层次结构的计算机结构"></p><h3 id="1-1-3-计算机组成和计算机体系结构"><a href="#1-1-3-计算机组成和计算机体系结构" class="headerlink" title="1.1.3 计算机组成和计算机体系结构"></a>1.1.3 计算机组成和计算机体系结构</h3><p>计算机体系结构：指那些能够程序员所见到的计算机系统的属性，及 <strong>概念性的结构</strong> 与 <strong>功能特性</strong> 。</p><p>计算机组成：指如何实现计算机体系结构所体现的属性，包含了许多对程序员来说是透明的 <strong>硬件细节</strong>。</p><h2 id="1-2-计算机的基本组成"><a href="#1-2-计算机的基本组成" class="headerlink" title="1.2 计算机的基本组成"></a>1.2 计算机的基本组成</h2><h3 id="1-2-1-冯·诺依曼计算机的特点"><a href="#1-2-1-冯·诺依曼计算机的特点" class="headerlink" title="1.2.1 冯·诺依曼计算机的特点"></a>1.2.1 冯·诺依曼计算机的特点</h3><ul><li>计算机由<strong>运算器、存储器、控制器、输入设备及输出设备</strong>五大部件组成</li><li>指令和数据以<strong>同等地位</strong>存放于存储器内，并<strong>可按地址寻访</strong></li><li>指令和数据均用<strong>二进制</strong>数表示</li><li>指令由<strong>操作码和地址码</strong>组成</li><li>指令在存储器内按<strong>顺序</strong>存放</li><li>机器以<strong>运算器</strong>为中心，输入输出设备与存储器间的数据传送均通过运算器完成</li></ul><h3 id="1-2-2-计算机的硬件框图"><a href="#1-2-2-计算机的硬件框图" class="headerlink" title="1.2.2 计算机的硬件框图"></a>1.2.2 计算机的硬件框图</h3><p><img src="/imgs/chapter1/%E5%86%AF%C2%B7%E8%AF%BA%E4%BE%9D%E6%9B%BC.png" alt="典型的冯·诺依曼计算机结构框图" title="典型的冯·诺依曼计算机结构框图"></p><p><img src="/imgs/chapter1/%E4%BB%A5%E5%AD%98%E5%82%A8%E5%99%A8%E4%B8%BA%E4%B8%AD%E5%BF%83.png" alt="以存储器为中心的计算机结构框图" title="以存储器为中心的计算机结构框图"></p><p>图中各部件的功能：</p><ul><li>运算器用来完成<strong>算数运算和逻辑运算</strong>，并将运算的中间结果暂存在运算器内</li><li>存储器用来存放<strong>数据和程序</strong></li><li>控制器用来<strong>控制、指挥程序和数据的输入、运行以及处理运算结果</strong></li><li>输入设备用来<strong>将人们熟悉的信息形式转换为机器能识别的信息形式</strong></li><li>输出设备可<strong>将机器运算结果转换为人们熟悉的信息形式</strong></li></ul><p>现代计算机可认为由三大部分组成：<strong>CPU、I&#x2F;O设备及主存储器</strong>。CPU和主存储器合起来又可以称为主机，I&#x2F;O设备又可以称为外部设备。</p><blockquote><p>计算机有条不紊地自动工作都是在<strong>控制器</strong>统一指挥下完成的。</p></blockquote><h3 id="1-2-3-计算机的工作步骤"><a href="#1-2-3-计算机的工作步骤" class="headerlink" title="1.2.3 计算机的工作步骤"></a>1.2.3 计算机的工作步骤</h3><p>用计算机解决一个实际问题通常包含两大步骤：一个是上机前的各种准备，另一个是上机后的运行。</p><h4 id="上机前的准备"><a href="#上机前的准备" class="headerlink" title="上机前的准备"></a>上机前的准备</h4><ol><li>建立数学模型</li><li>确定计算方法</li><li>编制解题程序</li></ol><h4 id="计算机的工作过程"><a href="#计算机的工作过程" class="headerlink" title="计算机的工作过程"></a>计算机的工作过程</h4><p><img src="/imgs/chapter1/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E6%A1%86%E5%9B%BE.png" alt="细化的计算机组成框图"></p><hr><p><strong>主存器</strong></p><p>主存储器包括<strong>存储体M、各种逻辑部件及控制电路等</strong>。存储体由许多<strong>存储单元</strong>组成，每个存储单元又包含若干个<strong>存储元件</strong>，每个存储元件能寄存<strong>一位二进制代码“0”或“1”</strong>。</p><p>主存的工作方式是<strong>按存储单元的地址号来实现对存储字各位的存（写入）、取（读出）</strong>。为了实现这种按地址访问的方式，主存中还必须配置两个寄存器MAR和MDR。</p><p>MAR是<strong>存储器地址寄存器</strong>，用来存放<strong>欲访问的存储单元的地址</strong>，其位数对应<strong>存储单元的个数</strong>。</p><p>MDR是<strong>存储器数据寄存器</strong>，用来存放<strong>从存储体某个单元取出的代码或者准备往某存储元存入的代码</strong>，其位数与<strong>存储字长相等</strong>。</p><hr><p><strong>运算器</strong></p><p>运算器最少包括<strong>三个寄存器和一个算数逻辑单元（ALU）</strong>。其中ACC为累加器，MQ为乘商寄存器，X为操作数寄存器。</p><hr><p><strong>控制器</strong></p><p>控制器是<strong>计算机的神经中枢</strong>，由它<strong>指挥各部件自动、协调地工作</strong>。</p><p>完成一条指令操作包括<strong>取指</strong>（命令存储器读出一条指令）、<strong>分析</strong>（对这条指令进行分析，指出该指令要完成什么样的操作，并按寻址特征指明操作数的地址）和<strong>执行</strong>（根据操作数所在地址及指令的操作码完成某种操作）三个阶段。</p><p>控制器由<strong>程序计数器（PC）、指令寄存器（IR）以及控制单元（CU）组成</strong>。</p><p>PC用来存放<strong>当前欲执行指令的地址</strong>，它<strong>与主存的MAR</strong>之间有一条直接通路，且<strong>具有自动加1的功能</strong>，即可<strong>自动形成下一条指令的地址</strong>。</p><p>IR用来存放<strong>当前的指令</strong>，IR的内容<strong>来自主存的MDR</strong>。</p><p>CU用来<strong>分析当前指令所需要完成的操作</strong>，并发出各种微操作命令序列，用以控制所有被控对象。</p><hr><p><strong>I&#x2F;O</strong></p><p>I&#x2F;O子系统包括<strong>各种I&#x2F;O设备及其相应的接口</strong>。每一种I&#x2F;O设备都由I&#x2F;O接口与主机联系，它<strong>接收CU发出的各种控制命令并完成相应的操作</strong>。</p><hr><h2 id="1-3-课后题"><a href="#1-3-课后题" class="headerlink" title="1.3 课后题"></a>1.3 课后题</h2><h3 id="1-11-指令和数据都存于存储器中，计算机如何区分它们？"><a href="#1-11-指令和数据都存于存储器中，计算机如何区分它们？" class="headerlink" title="1.11 指令和数据都存于存储器中，计算机如何区分它们？"></a>1.11 指令和数据都存于存储器中，计算机如何区分它们？</h3><p>答：通过不同的地址（区域）。</p>]]></content>
    
    
    <categories>
      
      <category>计算机组成原理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/03/24/hello-world/"/>
    <url>/2023/03/24/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
